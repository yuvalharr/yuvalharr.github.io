library(ggplot2)
theme_set(theme_bw())
library(rjson)
library(ez)
library(plyr)
library(Hmisc)
setwd ("C:/Users/yuval/Desktop/lab/Thesis/yuvalharr.github.io")
dt <- fread('cognitive-experiment- pilot.csv')
dt <- dt[, rt:=as.integer(rt)] # make rt column as int instead of string
only_animation <- dt[trial_type == 'animation'] # take only animation trials
only_animation <- only_animation[trial_index >15] # discard demo trials
oredered <- only_animation[order(run_id, -rt)]
View(oredered)
dt <- fread('cognitive-experiment- pilot.csv')
dt <- dt[, rt:=as.double(rt)] # make rt column as int instead of string
View(dt)
only_animation <- dt[trial_type == 'animation'] # take only animation trials
only_animation <- only_animation[trial_index >15] # discard demo trials
oredered <- only_animation[order(run_id, -rt)]
View(oredered)
only_animation[,trial_type]
only_animation[, trial_type]
only_animation[, rt]
only_animation[, 'rt']
library(data.table)
library(ggplot2)
theme_set(theme_bw())
library(rjson)
library(ez)
library(plyr)
library(Hmisc)
setwd ("C:/Users/yuval/Desktop/lab/Thesis/yuvalharr.github.io")
dt <- fread('cognitive-experiment- pilot.csv')
dt <- dt[, rt:=as.double(rt)] # make rt column as int instead of string
#check total running times
only_animation <- dt[trial_type == 'animation'] # take only animation trials
only_animation <- only_animation[trial_index >15] # discard demo trials
ordered <- only_animation[order(run_id, -rt)] # order by rt for each subject
only_animation[, trial_type]
only_animation[, list(trial)]
only_animation[, list(trial_type)]
only_animation[, .(trial_type)]
dt[, .(.N), by = .(trial_type)]
dt[, .(.N), by = .(run_id)]
only_animation <- dt[trial_type == ('animation' | 'image-button-response'] # take only animation trials
only_animation <- dt[trial_type == ('animation' | 'image-button-response')] # take only animation trials
only_animation <- dt[trial_type == ('animation' | trial_type =='image-button-response')] # take only animation trials
only_animation <- dt[trial_type == 'animation' | trial_type =='image-button-response'] # take only animation trials
View(only_animation)
View(only_animation)
only_animation[, .(trial_type)]
ans <- only_animation[, .(mean(rt)),
by = .(run_id)]
View(ans)
ans <- only_animation[, mean(rt),
by = .(run_id)]
ans <- only_animation[trial_type == 'animation', mean('rt'),
by = .(run_id)]
ans <- only_animation[trial_type == 'animation', mean(rt),
by = .(run_id)]
View(ans)
ans <- only_animation[trial_type == 'animation', mean(rt, na.rm = T),
by = .(run_id)]
ans <- only_animation[trial_type == 'animation', mean_rt = mean(rt, na.rm = T),
by = .(run_id)]
ans <- only_animation[trial_type == 'animation', 'mean_rt' = mean(rt, na.rm = T),
by = .(run_id)]
ans <- only_animation[trial_type == 'animation', mean_rt =.(mean(rt, na.rm = T)),
by = .(run_id)]
ans <- only_animation[trial_type == 'animation', .(mean_rt =mean(rt, na.rm = T)),
by = .(run_id)]
ans <- only_animation[trial_type == 'animation',
.(mean_rt = mean(rt, na.rm = T)),
.(task_finish_time) = max(time_elapsed)
by = .(run_id)]
ans <- only_animation[trial_type == 'animation',
.(mean_rt = mean(rt, na.rm = T)),
.(task_finish_time) = max(time_elapsed),
by = .(run_id)]
ans <- only_animation[trial_type == 'animation',
.(mean_rt = mean(rt, na.rm = T)),
.(task_finish_time) = max(time_elapsed),
by = .(run_id)]
ans <- only_animation[trial_type == 'animation',
.(mean_rt = mean(rt, na.rm = T)),
.(task_finish_time = max(time_elapsed)),
by = .(run_id)]
ans <- only_animation[trial_type == 'animation',
.(mean_rt = mean(rt, na.rm = T)),
.(task_finish_time = max(time_elapsed)),
keyby = .(run_id)]
ans <- only_animation[trial_type == 'animation',
.(mean_rt = mean(rt, na.rm = T)),
.(task_finish_time = max(time_elapsed)),
by = run_id]
ans <- only_animation[trial_type == 'animation',
.(mean_rt = mean(rt, na.rm = T)),
.(task_finish_time = mean(time_elapsed, na.rm = F)),
by = .(run_id)]
ans <- only_animation[trial_type == 'animation',
.(mean_rt = mean(rt, na.rm = T),
task_finish_time = mean(time_elapsed, na.rm = F)),
by = .(run_id)]
ans <- only_animation[trial_type == 'animation',
.(
mean_rt = mean(rt, na.rm = T),
task_finish_time = max(time_elapsed)
),
by = .(run_id)]
# Open data ----
setwd ("C:/Users/yuval/Desktop/lab/data/Naama/xls") #laptop
# Open data ----
setwd ("C:/Users/yuval/Desktop/lab/data/Naama/xls") #laptop
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("fs")) install.packages("fs")
if(!require("readxl")) install.packages("readxl")
#load packages
library(tidyverse)
library(fs)
library(readxl)
library(stringr)
library(dplyr)
read_excel_allsheets <- function(filename, tibble = FALSE) {
# I prefer straight data.frames
# but if you like tidyverse tibbles (the default with read_excel)
# then just pass tibble = TRUE
sheets <- readxl::excel_sheets(filename)
x <- lapply(sheets, function(X) readxl::read_excel(filename, sheet = X))
if(!tibble) x <- lapply(x, as.data.frame)
names(x) <- sheets
x
} # Function for reading .xls
prepareEDA <- function(filename1, filename2, filename3, subject) {
a_binded <- NaN
b_binded <- NaN
c_binded <- NaN
try({
a <- read_excel_allsheets(filename1)
a_binded <- rbind(a[[1]], a[[3]]) # Merge sheets 1 & 3
rownames(a_binded) <- a_binded[,1] # Make the first column be the names of the variables
a_binded[,1] <- NULL
})
try({
b <- read_excel_allsheets(filename2)
b_binded <- rbind(b[[1]],b[[3]]) # Merge sheets 1 & 3
rownames(b_binded) <- b_binded[,1] # Make the first column be the names of the variables
b_binded[,1] <- NULL
})
try({
c <- read_excel_allsheets(filename3)
c_binded <- rbind(c[[1]],c[[3]]) # Merge sheets 1 & 3
rownames(c_binded) <- c_binded[,1] # Make the first column be the names of the variables
c_binded[,1] <- NULL
})
full_EDA <- cbind(a_binded, b_binded, c_binded) #combine all three videos of same subject
full_EDA <- as.data.frame(t(full_EDA)) # flip rows and columns so all variables are now columns
full_EDA['subject'] <- subject # add subject name to dataframe
rownames(full_EDA) <- c() # get rid of rownames
return(full_EDA)
} #function for extracting EDA data for each subject
prepareSCR <- function(filename1,filename2, filename3, subject) {
a_binded <- NaN
b_binded <- NaN
c_binded <- NaN
try({
a <- read_excel_allsheets(filename1)
a_binded <- rbind(a[[2]]) # Take sheet 2 (SCR)
a_binded$video <- 'a'
})
try({
b <- read_excel_allsheets(filename2)
b_binded <- rbind(b[[2]]) # Take sheet 2 (SCR)
b_binded$video <- 'b'
})
try({
c <- read_excel_allsheets(filename3)
c_binded <- rbind(c[[2]]) # Take sheet 2 (SCR)
c_binded$video <- 'c'
})
full_SCR <- rbind(a_binded, b_binded, c_binded )
full_SCR$subject <- subject # add subject name to df
return(full_SCR)
} #function for extracting SCR data for each subject
for (i in 307:317) { # extract all subjects data
tryCatch({
print(i)
}, error=function(e){cat("Kus Ochtok no file :",conditionMessage(e), "\n")})
subjectNum <- as.character(i)
EDA <- paste("EDA", subjectNum, sep = "")
SCR <- paste("SCR", subjectNum, sep = "")
baseline <- paste("baseline", subjectNum, sep = "")
try({assign(EDA, prepareEDA(paste(subjectNum,'a.xlsx', sep = ""), paste(subjectNum,'b.xlsx', sep = ""), paste(subjectNum,'c.xlsx', sep = ""), subjectNum))})
try({assign(SCR, prepareSCR(paste(subjectNum,'a.xlsx', sep = ""), paste(subjectNum,'b.xlsx', sep = ""), paste(subjectNum,'c.xlsx', sep = ""), subjectNum))})
try({assign(baseline, prepareEDA(paste(subjectNum,'_EDA Analysis_Baseline.xlsx', sep = ""), paste(subjectNum,'_EDA Analysis_Baseline.xlsx', sep = ""), paste(subjectNum,'_EDA Analysis_Baseline.xlsx', sep = ""), subjectNum))})
}
EDA307$baseline <- baseline307$`Mean SC`[1]
EDA308$baseline <- baseline308$`Mean SC`[1]
EDA309$baseline <- baseline309$`Mean SC`[1]
EDA310$baseline <- baseline310$`Mean SC`[1]
EDA311$baseline <- baseline311$`Mean SC`[1]
EDA312$baseline <- baseline312$`Mean SC`[1]
EDA314$baseline <- NaN  # like this because 314 doesn't have baseline.
EDA315$baseline <- baseline315$`Mean SC`[1]
EDA316$baseline <- baseline316$`Mean SC`[1]
EDA317$baseline <- baseline317$`Mean SC`[1]
View(EDA315)
View(SCR315)
View(EDA315)
merged_EDA <- rbind(EDA307,EDA308, EDA309, EDA310, EDA311, EDA312, EDA314, EDA315, EDA316, EDA317) # without subj 13
merged_SCR <- rbind(SCR307,SCR308, SCR309, SCR310, SCR311, SCR312, SCR314, SCR315, SCR317) # without subj 13 & 16
merged_EDA$deltaFromBaseline <- merged_EDA$`Mean SC`-merged_EDA$baseline
df_EDA <- group_by(merged_EDA, subject)
summary_EDA <- summarise(df_EDA, baseline = mean(baseline), avg_Mean_SC = mean(`Mean SC`), avg_delta = mean(deltaFromBaseline)) # observe baseline delta
View(summary_EDA)
df_SCR <- group_by(merged_SCR, subject, video)
summary_SCR <- summarise(df_SCR, amplitude_std = sd(Amplitude), amplitude_average = mean(Amplitude), amplitude_count = n()) # observe Amplitude attribute
View(summary_SCR)
View(EDA315)
View(EDA315)
View(SCR315)
library(data.table)
library(ggplot2)
theme_set(theme_bw())
library(rjson)
library(ez)
library(plyr)
library(Hmisc)
setwd ("C:/Users/yuval/Desktop/lab/Thesis/yuvalharr.github.io")
dt <- fread('cognitive-experiment- pilot.csv')
dt <- dt[, rt:=as.double(rt)] # make rt column as int instead of string
only_animation <- dt[trial_type == 'animation' | trial_type =='image-button-response'] # take only animation trials
only_animation&imageButton <- only_animation[trial_index >15] # discard demo trials
ordered <- only_animation[order(run_id, -rt)] # order by rt for each subject
only_animation[, .(trial_type)]
ans <- only_animation[trial_type == 'animation',
.(
mean_rt = mean(rt, na.rm = T),
task_finish_time = max(time_elapsed)
),
by = .(run_id)]
ans$task_finish_time/100/60
mili_to_sec <- ans$task_finish_time/100/60
mili_to_sec
mili_to_min <- ans$task_finish_time/1000/60
mili_to_min
ans[, (mili_to_min) := ans[fields]]
ans[, (mili_to_min) := ans[mili_to_min]]
cbind(ans, mili_to_min)
ans <- cbind(ans, mili_to_min)
View(ans)
ans <- cbind(ans, .(total_task_min = mili_to_min))
View(ans)
ans <- only_animation[trial_type == 'animation',
.(
mean_rt = mean(rt, na.rm = T),
task_finish_time = max(time_elapsed)
),
by = .(run_id)]
mili_to_min <- ans$task_finish_time/1000/60
ans <- cbind(ans, .(total_task_min = mili_to_min))
View(ans)
ans <- only_animation[trial_type == 'animation',
.(
mean_rt = mean(rt, na.rm = T),
task_finish_time = max(time_elapsed)
),
by = .(run_id)]
mili_to_min <- ans$task_finish_time/1000/60
ans <- cbind(ans, total_task_min = mili_to_min)
View(ans)
ans <- only_animation[trial_type == 'animation',
.(
mean_rt = mean(rt, na.rm = T),
task_finish_time = max(time_elapsed),
task_start_time = min(time_elapsed)
),
by = .(run_id)]
mili_to_min <- .(ans$task_finish_time/1000/60, ans$task_start_time)
View(mili_to_min)
mili_to_min
mili_to_min[1]
mili_to_min[[1]]
mili_to_min <- c(ans$task_finish_time/1000/60, ans$task_start_time)
mili_to_min
mili_to_min[1]
mili_to_min <- data.frame(, ans$task_finish_time/1000/60, ans$task_start_time)
mili_to_min <- data.frame(ans$task_finish_time/1000/60, ans$task_start_time)
View(mili_to_min)
mili_to_min <- data.frame(ans$task_finish_time/1000/60, ans$task_start_time/1000/60)
View(mili_to_min)
mili_to_min <- data.frame(task_finish_min = ans$task_finish_time/1000/60, task_start_min = ans$task_start_time/1000/60)
View(mili_to_min)
ans <- cbind(ans, mili_to_min)
ans[,task_finish_min-task_start_min]
ans <- ans$total_task_time = ans[,task_finish_min-task_start_min]
ans$total_task_time <- ans[,task_finish_min-task_start_min]
ans$total_task_time_min <- ans[,task_finish_min-task_start_min]
library(data.table)
library(ggplot2)
theme_set(theme_bw())
library(rjson)
library(ez)
library(plyr)
library(Hmisc)
setwd ("C:/Users/yuval/Desktop/lab/Thesis/yuvalharr.github.io")
dt <- fread('cognitive-experiment- pilot.csv')
dt <- dt[, rt:=as.double(rt)] # make rt column as int instead of string
only_animation <- dt[trial_type == 'animation' | trial_type =='image-button-response'] # take only animation trials
library(data.table)
library(ggplot2)
theme_set(theme_bw())
library(rjson)
library(ez)
library(plyr)
library(Hmisc)
setwd ("C:/Users/yuval/Desktop/lab/Thesis/yuvalharr.github.io")
dt <- fread('cognitive-experiment- pilot.csv')
dt <- dt[, rt:=as.double(rt)] # make rt column as int instead of string
only_animation&detection<- dt[trial_type == 'animation' | trial_type =='image-button-response'] # take only animation trials
only_animation&detection <- only_animation[trial_index >15] # discard demo trials
only_animation&detection<- dt[trial_type == 'animation' | trial_type =='image-button-response'] # take only animation trials
library(data.table)
library(ggplot2)
theme_set(theme_bw())
library(rjson)
library(ez)
library(plyr)
library(Hmisc)
setwd ("C:/Users/yuval/Desktop/lab/Thesis/yuvalharr.github.io")
dt <- fread('cognitive-experiment- pilot.csv')
dt <- dt[, rt:=as.double(rt)] # make rt column as int instead of string
only_animation&detection<- dt[trial_type == 'animation' | trial_type =='image-button-response'] # take only animation trials
only_animation_detection<- dt[trial_type == 'animation' | trial_type =='image-button-response'] # take only animation trials
only_animation_detection <- only_animation_detection[trial_index >15] # discard demo trials
ordered <- only_animation[order(run_id, -rt)] # order by rt for each subject
only_animation[, .(trial_type)]
ordered <- only_animation_detection[order(run_id, -rt)] # order by rt for each subject
only_animation_detection[, .(trial_type)]
ans <- only_animation[trial_type == 'animation',
.(
mean_rt = mean(rt, na.rm = T),
task_finish_time = max(time_elapsed),
task_start_time = min(time_elapsed)
),
by = .(run_id)]
ans <- only_animation_detection[trial_type == 'animation',
.(
mean_rt = mean(rt, na.rm = T),
task_finish_time = max(time_elapsed),
task_start_time = min(time_elapsed)
),
by = .(run_id)]
View(ans)
mili_to_min <- data.frame(task_finish_min = ans$task_finish_time/1000/60, task_start_min = ans$task_start_time/1000/60)
ans <- cbind(ans, mili_to_min)
ans$total_task_time_min <- ans[,task_finish_min-task_start_min]
View(ans)
View(dt)
View(dt)
dt[trial_type=='virtual-chin']
View(mili_to_min)
View(ans)
View(ordered)
viewing_distance <- dt[trial_type == 'virtual-chin', .(distance_cm = viewing_distance_cm)]
View(viewing_distance)
mili_to_min <- data.frame(task_finish_min = ans$task_finish_time/1000/60, task_start_min = ans$task_start_time/1000/60)
View(mili_to_min)
View(ans)
ans <- only_animation_detection[trial_type == 'animation',
.(
mean_rt = mean(rt, na.rm = T),
task_finish_time = max(time_elapsed),
task_start_time = min(time_elapsed),
run_id = run_id
),
by = .(run_id)]
View(ans)
View(mili_to_min)
mili_to_min <- data.frame(ans$run_id, task_finish_min = ans$task_finish_time/1000/60, task_start_min = ans$task_start_time/1000/60)
viewing_distance <- dt[trial_type == 'virtual-chin', .(viewing_distance_cm, run_id)]
View(viewing_distance)
ans <- cbind(ans, mili_to_min, viewing_distance)
library(data.table)
library(ggplot2)
theme_set(theme_bw())
library(rjson)
library(ez)
library(plyr)
library(Hmisc)
setwd ("C:/Users/yuval/Desktop/lab/Thesis/yuvalharr.github.io")
dt <- fread('cognitive-experiment- pilot.csv')
dt <- dt[, rt:=as.double(rt)] # make rt column as int instead of string
only_animation_detection<- dt[trial_type == 'animation' | trial_type =='image-button-response'] # take only animation trials
only_animation_detection <- only_animation_detection[trial_index >15] # discard demo trials
ordered <- only_animation_detection[order(run_id, -rt)] # order by rt for each subject
only_animation_detection[, .(trial_type)]
ans <- only_animation_detection[trial_type == 'animation',
.(
mean_rt = mean(rt, na.rm = T),
task_finish_time = max(time_elapsed),
task_start_time = min(time_elapsed),
run_id = run_id
),
by = .(run_id)]
viewing_distance <- dt[trial_type == 'virtual-chin', .(viewing_distance_cm, run_id)]
mili_to_min <- data.frame(ans$run_id, task_finish_min = ans$task_finish_time/1000/60, task_start_min = ans$task_start_time/1000/60)
View(ans)
View(mili_to_min)
library(data.table)
library(ggplot2)
theme_set(theme_bw())
library(rjson)
library(ez)
library(plyr)
library(Hmisc)
setwd ("C:/Users/yuval/Desktop/lab/Thesis/yuvalharr.github.io")
dt <- fread('cognitive-experiment- pilot.csv')
dt <- dt[, rt:=as.double(rt)] # make rt column as int instead of string
#check total running times
only_animation_detection<- dt[trial_type == 'animation' | trial_type =='image-button-response'] # take only animation trials
only_animation_detection <- only_animation_detection[trial_index >15] # discard demo trials
ordered <- only_animation_detection[order(run_id, -rt)] # order by rt for each subject
only_animation_detection[, .(trial_type)]
ans <- only_animation_detection[trial_type == 'animation',
.(
mean_rt = mean(rt, na.rm = T),
task_finish_time = max(time_elapsed),
task_start_time = min(time_elapsed),
run_id = run_id
),
by = .(run_id)]
viewing_distance <- dt[trial_type == 'virtual-chin', .(run_id, viewing_distance_cm)]
View(viewing_distance)
mili_to_min <- ans[,.(run_id, task_finish_min = ans$task_finish_time/1000/60, task_start_min = task_start_time/1000/60)]
View(mili_to_min)
ans <- cbind(ans, mili_to_min, viewing_distance)
ans <- merge(ans, mili_to_min, viewing_distance)
typeof(ans)
ans <- data.table (only_animation_detection[trial_type == 'animation',
.(
mean_rt = mean(rt, na.rm = T),
task_finish_time = max(time_elapsed),
task_start_time = min(time_elapsed),
run_id = run_id
),
by = .(run_id)])
typeof(ans)
checkDataTable(ans)
check_data_table(ans)
test.data.table(ans)
is.data.table(ans)
is.data.table(viewing_distance)
is.data.table(mili_to_min)
library(data.table)
library(ggplot2)
theme_set(theme_bw())
library(rjson)
library(ez)
library(plyr)
library(Hmisc)
setwd ("C:/Users/yuval/Desktop/lab/Thesis/yuvalharr.github.io")
dt <- fread('cognitive-experiment- pilot.csv')
dt <- dt[, rt:=as.double(rt)] # make rt column as int instead of string
#check total running times
only_animation_detection<- dt[trial_type == 'animation' | trial_type =='image-button-response'] # take only animation trials
only_animation_detection <- only_animation_detection[trial_index >15] # discard demo trials
ordered <- only_animation_detection[order(run_id, -rt)] # order by rt for each subject
only_animation_detection[, .(trial_type)]
ans <- data.table (only_animation_detection[trial_type == 'animation',
.(
mean_rt = mean(rt, na.rm = T),
task_finish_time = max(time_elapsed),
task_start_time = min(time_elapsed),
run_id = run_id
),
by = .(run_id)])
viewing_distance <- dt[trial_type == 'virtual-chin', .(run_id, viewing_distance_cm)]
mili_to_min <- ans[,.(run_id, task_finish_min = ans$task_finish_time/1000/60, task_start_min = task_start_time/1000/60)]
library(data.table)
library(ggplot2)
theme_set(theme_bw())
library(rjson)
library(ez)
library(plyr)
library(Hmisc)
setwd ("C:/Users/yuval/Desktop/lab/Thesis/yuvalharr.github.io")
dt <- fread('cognitive-experiment- pilot.csv')
dt <- dt[, rt:=as.double(rt)] # make rt column as int instead of string
#check total running times
only_animation_detection<- dt[trial_type == 'animation' | trial_type =='image-button-response'] # take only animation trials
only_animation_detection <- only_animation_detection[trial_index >15] # discard demo trials
ordered <- only_animation_detection[order(run_id, -rt)] # order by rt for each subject
only_animation_detection[, .(trial_type)]
ans <- data.table (only_animation_detection[trial_type == 'animation',
.(
mean_rt = mean(rt, na.rm = T),
task_finish_time = max(time_elapsed),
task_start_time = min(time_elapsed),
run_id = run_id
),
by = .(run_id)])
library(data.table)
library(ggplot2)
theme_set(theme_bw())
library(rjson)
library(ez)
library(plyr)
library(Hmisc)
setwd ("C:/Users/yuval/Desktop/lab/Thesis/yuvalharr.github.io")
dt <- fread('cognitive-experiment- pilot.csv')
dt <- dt[, rt:=as.double(rt)] # make rt column as int instead of string
dt <- fread('cognitive-experiment- pilot.csv')
